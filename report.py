import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import os
from datetime import datetime
from PIL import Image, ImageDraw, ImageFont # Ensure Image is imported here

# --- Configuration ---
ANALYSIS_RESULTS_CSV = "analysis_results.csv"
CAPTURED_FACES_BASE_DIR = "captured_faces"
REPORTS_DIR = "reports" # Directory to save generated images and reports

# Ensure the reports directory exists
os.makedirs(REPORTS_DIR, exist_ok=True)

# Define a function to get a color for plotting similarity
def get_similarity_color(value):
    if pd.isna(value) or value < 50:
        return 'red'
    elif value < 70:
        return 'orange'
    else:
        return 'green'

# Function to get the latest analysis row for a specific baby photo
def get_latest_analysis_for_photo(df, baby_filename):
    """Retrieves the latest analysis row for a given baby photo."""
    photo_df = df[df['baby_filename'] == baby_filename].sort_values(by='timestamp', ascending=False)
    if not photo_df.empty:
        return photo_df.iloc[0]
    return None

# Function to get the latest baby photo from the directory
def get_latest_baby_photo_filename():
    baby_dir = os.path.join(CAPTURED_FACES_BASE_DIR, "baby")
    if os.path.exists(baby_dir):
        baby_photos = sorted([f for f in os.listdir(baby_dir) if f.lower().endswith(('.png', '.jpg', '.jpeg'))], reverse=True)
        if baby_photos:
            return baby_photos[0]
    return None

# Function to get a feature image or placeholder
def get_feature_image_path(image_name, parent_type=None):
    if parent_type:
        return os.path.join(CAPTURED_FACES_BASE_DIR, parent_type, image_name)
    return os.path.join(CAPTURED_FACES_BASE_DIR, "baby", image_name)

# --- Report Generation ---

print("Running report generation...")

# Load analysis results
if os.path.exists(ANALYSIS_RESULTS_CSV):
    try:
        df_results = pd.read_csv(ANALYSIS_RESULTS_CSV, parse_dates=['timestamp'])
        print(f"Loaded analysis_results.csv for reporting.")
    except Exception as e:
        print(f"Error loading {ANALYSIS_RESULTS_CSV}: {e}. Cannot generate report.")
        exit() # Exit if results cannot be loaded
else:
    print(f"Error: {ANALYSIS_RESULTS_CSV} not found. Cannot generate report.")
    exit()

# Sort results by timestamp to ensure "latest" is accurate
df_results = df_results.sort_values(by='timestamp', ascending=True).reset_index(drop=True)

# Get the latest baby photo analyzed
latest_baby_filename = get_latest_baby_photo_filename()
if not latest_baby_filename:
    print("No baby photos found to generate a report.")
    exit()

# Get the latest analysis row for the very latest baby photo
latest_analysis_row = get_latest_analysis_for_photo(df_results, latest_baby_filename)

if latest_analysis_row is None:
    print(f"No analysis data found for the latest baby photo: {latest_baby_filename}. Cannot generate report.")
    exit()

# --- 1. Overall Similarity Trend (Line Graph) ---
plt.figure(figsize=(12, 6))
# Filter for actual numeric values before plotting
plot_df = df_results.copy()
plot_df['overall_similarity_to_mother_weighted'] = pd.to_numeric(plot_df['overall_similarity_to_mother_weighted'], errors='coerce')
plot_df['overall_similarity_to_father_weighted'] = pd.to_numeric(plot_df['overall_similarity_to_father_weighted'], errors='coerce')

plt.plot(plot_df['timestamp'], plot_df['overall_similarity_to_mother_weighted'], label='To Mother', marker='o')
plt.plot(plot_df['timestamp'], plot_df['overall_similarity_to_father_weighted'], label='To Father', marker='o')
plt.title('Overall Weighted Resemblance Trend Over Time')
plt.xlabel('Date/Time')
plt.ylabel('Similarity (%)')
plt.ylim(0, 100) # Similarity is 0-100%
plt.grid(True)
plt.legend()
plt.tight_layout()
plt.savefig(os.path.join(REPORTS_DIR, 'overall_similarity_trend.png'))
plt.close()
print("Saved: overall_similarity_trend.png")


# --- 2. Feature-Specific Resemblance Visualizations (Image Comparison) ---
print("\n--- Generating Feature Comparison Images ---")

# For specific features where images were generated by analysis_module.py (if applicable)
# NOTE: The analysis_module.py doesn't *currently* generate these cropped images.
# This section assumes you might have logic in analysis_module.py or a separate script
# to save these cropped feature images to the `captured_faces` subdirectories.
# If not, these image paths will be broken.
# For now, let's use placeholder logic if actual images aren't present.

# Define the features for which you want to generate comparison images
# These should correspond to image files generated by analysis_module (e.g., in `captured_faces`)
# For this example, we'll try to load them based on conventions.
features_for_image_comparison = {
    'left_eye': {'mother': f'mother_left_eye.jpg', 'father': f'father_left_eye.jpg', 'baby': f'{latest_baby_filename.replace(".jpg", "_left_eye.jpg").replace(".png", "_left_eye.png")}'},
    'right_eye': {'mother': f'mother_right_eye.jpg', 'father': f'father_right_eye.jpg', 'baby': f'{latest_baby_filename.replace(".jpg", "_right_eye.jpg").replace(".png", "_right_eye.png")}'},
    'nose_tip': {'mother': f'mother_nose_tip.jpg', 'father': f'father_nose_tip.jpg', 'baby': f'{latest_baby_filename.replace(".jpg", "_nose_tip.jpg").replace(".png", "_nose_tip.png")}'},
    'mouth': {'mother': f'mother_mouth.jpg', 'father': f'father_mouth.jpg', 'baby': f'{latest_baby_filename.replace(".jpg", "_mouth.jpg").replace(".png", "_mouth.png")}'},
    'chin': {'mother': f'mother_chin.jpg', 'father': f'father_chin.jpg', 'baby': f'{latest_baby_filename.replace(".jpg", "_chin.jpg").replace(".png", "_chin.png")}'},
}

# NOTE: Your `analysis_module.py` does NOT currently save these cropped feature images.
# The following code will *try* to load them, but if they don't exist, it will use a placeholder.
# To make this section fully functional, you would need to add image cropping and saving
# logic into your `analysis_module.py` or a preprocessing script.

def create_placeholder_image(text="Image Not Found"):
    img = Image.new('RGB', (150, 100), color = (200, 200, 200))
    d = ImageDraw.Draw(img)
    try:
        fnt = ImageFont.truetype("arial.ttf", 15)
    except IOError:
        fnt = ImageFont.load_default()
    w, h = d.textsize(text, font=fnt)
    d.text(((150-w)/2, (100-h)/2), text, font=fnt, fill=(0,0,0))
    return img

for feature, paths in features_for_image_comparison.items():
    images = {}
    titles = {'baby': 'Baby', 'mother': 'Mother', 'father': 'Father'}
    
    all_placeholders = True
    for role, filename in paths.items():
        if role == 'baby':
            img_path = os.path.join(CAPTURED_FACES_BASE_DIR, "baby", filename)
        else:
            img_path = os.path.join(CAPTURED_FACES_BASE_DIR, role, filename)

        if os.path.exists(img_path):
            images[role] = Image.open(img_path)
            all_placeholders = False
        else:
            print(f"  '{feature}' landmarks not found in {role}'s image: {img_path}. Using placeholder.")
            images[role] = create_placeholder_image(f"{role.capitalize()} {feature.replace('_', ' ').title()}\n(Image Not Found)")

    if all_placeholders:
        print(f"Skipping combined image for {feature}: All images were placeholders.")
        continue # Skip generating image if all are placeholders

    fig, axes = plt.subplots(1, 3, figsize=(10, 4))
    fig.suptitle(f'{feature.replace("_", " ").title()} Comparison', fontsize=16)

    for i, role in enumerate(['baby', 'mother', 'father']):
        ax = axes[i]
        ax.imshow(images[role])
        ax.set_title(titles[role])
        ax.axis('off')

    plt.tight_layout(rect=[0, 0.03, 1, 0.95])
    plt.savefig(os.path.join(REPORTS_DIR, f'comparison_{feature}.png'))
    plt.close()
    print(f"Saved feature comparison: comparison_{feature}.png")


# --- 3. Latest Facial Resemblance Report (Textual Summary) ---

print("\n--- Latest Facial Resemblance Report ---")
current_analysis_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

print(f"Analysis Date: {current_analysis_date}")
print(f"Baby Photo: {latest_baby_filename}\n")

# Safely get the overall weighted resemblance values
# Use .item() to get the scalar value from the Pandas Series/DataFrame cell
# Use .fillna(pd.NA) or .fillna(0) if you want to explicitly handle missing data as 0 or NA
# Using .round(2) for better display formatting
overall_mother_sim = latest_analysis_row['overall_similarity_to_mother_weighted']
overall_father_sim = latest_analysis_row['overall_similarity_to_father_weighted']

# Check for NaN and format
mother_sim_str = f"{overall_mother_sim:.2f}%" if pd.notna(overall_mother_sim) else "Data not available"
father_sim_str = f"{overall_father_sim:.2f}%" if pd.notna(overall_father_sim) else "Data not available"

print(f"Overall Weighted Resemblance:")
print(f"  - To Mother: {mother_sim_str}")
print(f"  - To Father: {father_sim_str}")

# --- Parental Dominance Conclusion ---
print("\n--- Parental Dominance Conclusion ---")

if pd.notna(overall_mother_sim) and pd.notna(overall_father_sim):
    if overall_mother_sim > overall_father_sim + 5: # Threshold for "stronger" resemblance
        dominance_conclusion = "The baby's face appears to strongly resemble the Mother."
    elif overall_father_sim > overall_mother_sim + 5:
        dominance_conclusion = "The baby's face appears to strongly resemble the Father."
    else:
        dominance_conclusion = "The baby's face appears to be a balanced mix of both parents, or doesn't strongly favor one side based on weighted features."
    
    print(f"Conclusion: {dominance_conclusion}")
    print(f"  Mother's weighted resemblance: {overall_mother_sim:.2f}%, Father's weighted resemblance: {overall_father_sim:.2f}%")
else:
    print("Conclusion: Cannot determine parental dominance. Weighted similarity data is missing or invalid.")


# --- Paternity/Maternity Visual Likelihood ---
print("\n--- Paternity/Maternity Visual Likelihood ---")

if pd.notna(overall_mother_sim) and pd.notna(overall_father_sim):
    average_similarity = (overall_mother_sim + overall_father_sim) / 2
    if average_similarity >= 70:
        likelihood_text = "The baby's overall weighted facial resemblance to the parents is high. This provides strong visual evidence for a biological relation."
    elif average_similarity >= 50:
        likelihood_text = "The baby's overall weighted facial resemblance to the parents is moderate. This provides some visual evidence for a biological relation."
    else:
        likelihood_text = "The baby's overall weighted facial resemblance to the parents is low. Based on facial features alone, the visual evidence for a biological relation is weak."
    print(likelihood_text)
else:
    print("Paternity/Maternity Visual Likelihood: Cannot assess due to missing or invalid weighted similarity data.")


# --- Feature-Specific Resemblances (Latest Photo) ---
print("\n--- Feature-Specific Resemblances (Latest Photo) ---")

# Dynamically get all 'sim_mother_' and 'sim_father_' columns
feature_columns = [col.replace('sim_mother_', '') for col in latest_analysis_row.index if col.startswith('sim_mother_')]

for feature in sorted(feature_columns):
    mother_sim_col = f'sim_mother_{feature}'
    father_sim_col = f'sim_father_{feature}'

    mother_sim = latest_analysis_row.get(mother_sim_col, pd.NA)
    father_sim = latest_analysis_row.get(father_sim_col, pd.NA)

    # Convert to numeric, coercing errors to NaN
    mother_sim = pd.to_numeric(mother_sim, errors='coerce')
    father_sim = pd.to_numeric(father_sim, errors='coerce')

    if pd.isna(mother_sim) and pd.isna(father_sim):
        resemblance = "Data not available for this feature."
    else:
        mother_display = f"{mother_sim:.2f}%" if pd.notna(mother_sim) else "N/A"
        father_display = f"{father_sim:.2f}%" if pd.notna(father_sim) else "N/A"

        if pd.notna(mother_sim) and pd.notna(father_sim):
            diff = abs(mother_sim - father_sim)
            if diff < 10: # Within 10% points, consider it balanced
                resemblance = f"Balanced mix of both parents (Mother: {mother_display}, Father: {father_display})"
            elif mother_sim > father_sim:
                resemblance = f"Strongly like Mother ({mother_display}, Father: {father_display})"
            else:
                resemblance = f"Strongly like Father ({father_display}, Mother: {mother_display})"
        else: # One is NaN, one is not
            resemblance = f"Mixed resemblance (Mother: {mother_display}, Father: {father_display})"

    print(f"  - {feature.replace('_', ' ').capitalize()}: {resemblance}")

print("\nReport generation finished.")
print("Check the current directory for generated image files (e.g., .png).")
print("For a full GUI, consider frameworks like Streamlit, PyQt, or Tkinter.")
